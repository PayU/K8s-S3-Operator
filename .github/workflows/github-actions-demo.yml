name: ci tests
run-name: ${{ github.actor }} is testing out GitHub Actions 🚀
on: [push]
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."

  Create-Kind-Cluster:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.19
      - name: Install kustomize and docker
        run: GO111MODULE=on go get sigs.k8s.io/kustomize/kustomize/v3@v3.8.9
      - run: echo "create kind cluster"
      - run: cd ${{ github.workspace }}
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.4.0
        with:
          cluster_name: s3operator-cluster
          config: ./hack/kindConfig.yaml
      - uses: docker-practice/actions-setup-docker@master
      - name: Build Docker image
        run: docker build -t controller:tilt .
      - name: Load Docker image into Kind cluster
        run: kind load docker-image --name s3operator-cluster controller:tilt

      - name: deploy controller
        run: cd config/manager && kustomize edit set image controller=controller:tilt &&
         cd ../.. && kustomize build config/default | kubectl apply -f -

  Deploy-ingress:
    needs: Create-Kind-Cluster
    runs-on: ubuntu-latest
    steps:
      - run: kubectl apply -f https://raw.githubusercontent.com/Kong/kubernetes-ingress-controller/master/deploy/single/all-in-one-dbless.yaml && kubectl patch deployment -n kong ingress-kong -p '{"spec":{"template":{"spec":{"containers":[{"name":"proxy","ports":[{"containerPort":8000,"hostPort":4566,"name":"proxy","protocol":"TCP"},{"containerPort":8443,"hostPort":443,"name":"proxy-ssl","protocol":"TCP"}]}],"nodeSelector":{"ingress-ready":"true"},"tolerations":[{"key":"node-role.kubernetes.io/control-plane","operator":"Equal","effect":"NoSchedule"},{"key":"node-role.kubernetes.io/master","operator":"Equal","effect":"NoSchedule"}]}}}}' && kubectl patch service -n kong kong-proxy -p '{"spec":{"type":"NodePort"}}'

    